# MojoM used for simple create models into Mojo code.
package Mojolicious::Plugin::MojoM;
use Mojo::Base 'Mojolicious::Plugin';
use Storable 'freeze';

sub register {
    my ( $mojom, $app, $conf ) = @_;
    
    my $r = $app->routes;
       $r->namespace('Mojolicious::Plugin::MojoM::Controller');
       my $a = $r->route('/admin/db/');
          $a->to('admin#list')->name('admin#list');
    
    # Init DB.
    # Make Base Class.
    mkdir './lib/Mojolicious/Plugin/MojoM/Model';
    
    my $path = "./lib/Mojolicious/Plugin/MojoM/Config.pm";
    my $code = freeze( $conf );
    
    open  FILE, "> $path" or die "[-] Cann't write into file $path";
   
    print FILE qq { # Autogenerated by MojoM.
                    # Be careful when edit it.
                    
                    package Mojolicious::Plugin::MojoM::Config;
                    use base 'Rose::DB';
                    
                    __PACKAGE__->use_private_registry;
                    __PACKAGE__->default_connect_options( mysql_enable_utf8 => 1 );
                    
                    use Storable 'thaw';
                    
                    my \$a = thaw('$code');
                    
                    __PACKAGE__->register_db ( \%\$a );
                    
                    1;
                  };
    
    close FILE;
    
    my $class = Mojolicious::Plugin::MojoM::Class->new;
    
    $app->helper (
        model => sub {
            my ( $self, $name ) = @_;
            
            return $self unless $name;
            
            $class->model($name);
            $class->add_model( $name => 1 ) unless exists $class->models->{$name};
            
            return $class;
        }
    );
}

package Mojolicious::Plugin::MojoM::Class;
use Mojo::Base -base;
use Storable 'freeze';

has models => sub {{}};
has model  => undef;
has app    => undef;

sub _new { shift->app(shift) }

sub add_model {
    my ( $self, $key, $val ) = @_;
    
    $self->models ({
        %{$self->models},
        $key => $val
    });
}

sub init {
    my ( $self, @fields ) = @_;
    
    return $self unless @fields;
    
    my $code  = freeze( \@fields );
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    my $path  = "./lib/$class.pm";
       $path  =~ s/\:\:/\//g;
       
    open  FILE, "> $path" or die "[-] Cann't write into file $path";

    print FILE qq { # Autogenerated by MojoM.
                    # Be careful when edit it.
                    
                    package Mojolicious::Plugin::MojoM::Model::$name;
                    use base 'Mojolicious::Plugin::MojoM::Base';
                    
                    use Storable 'thaw';

                    my \$a = thaw('$code');

                    __PACKAGE__->meta->setup( \@\$a );

                    1;
                  };

    close FILE;
    
    return $self;
}
    
sub find {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    if ( $class->new(@fields)->load(speculative => 1) ) {
        return $class->new(@fields)->load;
    }
    
    Mojolicious->log->error (
        "Trying to get a nonexistent record from the database!\n".
        Mojolicious->dumper(\@fields)
    );
    
    return 0;
}
    
sub create {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    return $class->new(@fields);
}
    
sub exists {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    $class->new(@fields)->load(speculative => 1) ? 1 : 0;
}

1;

__END__

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011, Georgy Bazhukov.

This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

=cut

