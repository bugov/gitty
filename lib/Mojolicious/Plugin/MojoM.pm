# MojoM used for simple create models into Mojo code.
package Mojolicious::Plugin::MojoM;
use Mojo::Base 'Mojolicious::Plugin';
use Storable 'freeze';

sub register {
    my ( $self, $app, $conf ) = @_;
    
    # Routes
    my $r = $app->routes->to( namespace => 'Mojolicious::Plugin::MojoM::Controller' );
    
       my $a = $r->bridge('/db')->to( cb => sub { shift->user->is_admin } );
          $a->route('/')->via('get')->to('mojo_m#list')->name('mojo_m_list');
          $a->route('/:id', id => qr/[A-Za-z0-9\:]+/)->via('get')->to('mojo_m#read')->name('mojo_m_read');
          
          $a->route('/:id/new', id => qr/[A-Za-z0-9\:]+/)->via('get' )->to('mojo_m#row_form'  )->name('mojo_m_row_form'  );
          $a->route('/:id/new', id => qr/[A-Za-z0-9\:]+/)->via('post')->to('mojo_m#row_create')->name('mojo_m_row_create');
            
          my $row = $a->route('/:id/:rid', id => qr/[A-Za-z0-9\:]+/, rid => qr/\d+/);
             $row->route('/'   )->via('get' )->to('mojo_m#row_read'  )->name('mojo_m_row_read'  );
             $row->route('/'   )->via('post')->to('mojo_m#row_update')->name('mojo_m_row_update');
             $row->route('/del')->via('get' )->to('mojo_m#row_delete')->name('mojo_m_row_delete');
    
    # Init DB.
    # Make Base Class.
    mkdir './lib/Mojolicious/Plugin/MojoM/Model';
    
    my $path = "./lib/Mojolicious/Plugin/MojoM/Config.pm";
    my $code = freeze( $conf );
    
    open  FILE, "> $path" or die "[-] Cann't write into file $path";
   
    print FILE qq { # Autogenerated by MojoM.
                    # Be careful when edit it.
                    
                    package Mojolicious::Plugin::MojoM::Config;
                    use base 'Rose::DB';
                    
                    __PACKAGE__->use_private_registry;
                    __PACKAGE__->default_connect_options( mysql_enable_utf8 => 1 );
                    
                    use Storable 'thaw';
                    
                    my \$a = thaw('$code');
                    
                    __PACKAGE__->register_db ( \%\$a );
                    
                    1;
                  };
    
    close FILE;
    
    my $class = Mojolicious::Plugin::MojoM::Class->new;
    
    $app->helper (
        model => sub {
            my ( $self, $name, $id ) = @_;
            
            return $class unless $name;
            
            # Defined NAME
            $class->model($name);
            $class->add_model( $name => 1 ) unless exists $class->models->{$name};
            
            # Defined ID
            if ( defined $id ) {
                return $class->find (
                    $app->model($name)->raw->meta->primary_key || 'id' => $id );
            }
            
            return $class;
        }
    );
}

package Mojolicious::Plugin::MojoM::Class;
use Mojo::Base -base;
use Storable 'freeze';

has models => sub {{}};
has model  => undef;
has app    => undef;

sub add_model {
    my ( $self, $key, $val ) = @_;
    
    $self->models ({
        %{$self->models},
        $key => $val
    });
}

sub init {
    my ( $self, @fields ) = @_;
    
    return $self unless @fields;
    
    my $code  = freeze( \@fields );
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    my $path  = "./lib/$class.pm";
       $path  =~ s/\:\:/\//g;
       
    open  FILE, "> $path" or die "[-] Cann't write into file $path";

    print FILE qq { # Autogenerated by MojoM.
                    # Be careful when edit it.
                    
                    package Mojolicious::Plugin::MojoM::Model::$name;
                    use base 'Mojolicious::Plugin::MojoM::Base';
                    
                    use Storable 'thaw';

                    my \$a = thaw('$code');

                    __PACKAGE__->meta->setup( \@\$a );
                    
                    # Manager
                    
                    package Mojolicious::Plugin::MojoM::Model::${name}::Manager;
                    use base 'Rose::DB::Object::Manager';

                    sub object_class { 'Mojolicious::Plugin::MojoM::Model::$name' }

                    __PACKAGE__->make_manager_methods( lc '$name' );

                    1;
                  };

    close FILE;
    
    return $self;
}
    
sub find {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    if ( $class->new(@fields)->load(speculative => 1) ) {
        return $class->new(@fields)->load;
    }
    
    Mojolicious->log->error (
        "Trying to get a nonexistent record from the database!\n".
        Mojolicious->dumper(\@fields)
    );
    
    return 0;
}
    
sub create {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    return $class->new(@fields);
}
    
sub exists {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    $class->new(@fields)->load(speculative => 1) ? 1 : 0;
}

sub list {
    my ( $self, @fields ) = @_;
    
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::${name}::Manager";
    
    eval "require $class";
    
    $class->get_objects(
        @fields,
        object_class => "Mojolicious::Plugin::MojoM::Model::$name"
    )
}

sub range {
    my ( $self, $start, $offset ) = @_;
    
    $self->list(
        sort_by => 'id DESC',
        limit   => $offset,
        offset  => $start,
    );
}

sub raw {
    my $self  = shift;
    my $name  = $self->model;
    my $class = "Mojolicious::Plugin::MojoM::Model::$name";
    
    eval "require $class";
    
    return $class;
}

1;

__END__

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011, Georgy Bazhukov.

This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

=cut

